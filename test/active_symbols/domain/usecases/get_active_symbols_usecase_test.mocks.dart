// Mocks generated by Mockito 5.2.0 from annotations
// in price_tracker/test/active_symbols/domain/usecases/get_active_symbols_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:price_tracker/active_symbols/domain/entities/active_symbol.dart'
    as _i7;
import 'package:price_tracker/active_symbols/domain/repository/get_active_symbols_repository.dart'
    as _i2;
import 'package:price_tracker/active_symbols/domain/usecases/get_active_symbols_usecase.dart'
    as _i4;
import 'package:price_tracker/core/errors/failures.dart' as _i6;
import 'package:price_tracker/core/usecase/usecase.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeActiveSymbolRepositorybase_0 extends _i1.Fake
    implements _i2.ActiveSymbolRepositorybase {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetActiveSymbolUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetActiveSymbolUsecase extends _i1.Mock
    implements _i4.GetActiveSymbolUsecase {
  MockGetActiveSymbolUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ActiveSymbolRepositorybase get activeSymbolRepository =>
      (super.noSuchMethod(Invocation.getter(#activeSymbolRepository),
              returnValue: _FakeActiveSymbolRepositorybase_0())
          as _i2.ActiveSymbolRepositorybase);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ActivSymbol>>> call(
          _i8.NoParam? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, List<_i7.ActivSymbol>>>.value(
                      _FakeEither_1<_i6.Failure, List<_i7.ActivSymbol>>()))
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ActivSymbol>>>);
}
